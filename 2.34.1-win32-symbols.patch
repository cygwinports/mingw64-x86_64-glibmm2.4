--- origsrc/glibmm-2.34.1/gio/giomm/contenttype.cc	2012-11-05 02:03:17.000000000 -0600
+++ src/glibmm-2.34.1/gio/giomm/contenttype.cc	2013-01-03 00:57:03.660345900 -0600
@@ -56,6 +56,7 @@ Glib::RefPtr<Gio::Icon> content_type_get
   return retvalue;
 }
 
+#ifdef G_OS_UNIX
 Glib::RefPtr<Gio::Icon> content_type_get_symbolic_icon(const Glib::ustring& type)
 {
   Glib::RefPtr<Icon> retvalue = Glib::wrap(g_content_type_get_symbolic_icon(type.c_str()));
@@ -63,6 +64,7 @@ Glib::RefPtr<Gio::Icon> content_type_get
     retvalue->reference(); //The function does not do a ref for us.
   return retvalue;
 }
+#endif
 
 bool content_type_can_be_executable(const Glib::ustring& type)
 {
--- origsrc/glibmm-2.34.1/gio/giomm/contenttype.h	2012-11-05 02:03:17.000000000 -0600
+++ src/glibmm-2.34.1/gio/giomm/contenttype.h	2013-01-03 00:57:24.547540600 -0600
@@ -88,6 +88,7 @@ Glib::ustring content_type_get_mime_type
  */
 Glib::RefPtr<Icon> content_type_get_icon(const Glib::ustring& type);
 
+#ifdef G_OS_UNIX
 /**
  * Gets the symbolic icon for a content type.
  *
@@ -97,6 +98,7 @@ Glib::RefPtr<Icon> content_type_get_icon
  * @newin{2,34}
  */
 Glib::RefPtr<Icon> content_type_get_symbolic_icon(const Glib::ustring& type);
+#endif
 
 /**
  * Checks if a content type can be executable. Note that for instance
